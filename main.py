import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import csv
from datetime import datetime
import logging

from config_manager import load_config, save_config, save_folders, load_folders
from db_buffer import db_buffer
from telegram_notifier import TelegramNotifier
from watchdog_handlers import MyHandler, WatcherThread

logging.basicConfig(
    filename='log.txt',
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

DB_PATH = 'events.db'
FOLDERS_FILE = "folders.yaml"
CONFIG_FILE = "config.yaml"
DB_BUFFER_SIZE = 50
TREE_MAX_ROWS = 1000

class FileMonitorApp:
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫–∞, —â–æ –∫–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    —Ç–∞ –ª–æ–≥—ñ–∫–æ—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    """
    def __init__(self, root):
    	"""
    	–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–∞–ø–æ–∫ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
        –¢–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –æ–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é—Ç—å—Å—è –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ–¥—ñ–π.
        """
        self.root = root
        self.root.title("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏")
        self.config = load_config()
        self.paths = load_folders() or self.config.get('paths', [])
        self.thread = None
        self.notifier = TelegramNotifier(
            self.config.get('telegram',{}).get('token',''),
            self.config.get('telegram',{}).get('chat_id','')
        )
        self.event_filter = set(self.config.get('events',['created','modified','deleted','moved']))
        self._all_events = []
        self._build_ui()
        for p in self.paths:
            self.lst.insert("end", p)

    def _build_ui(self):
    	"""
        –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≤—Å—å–æ–≥–æ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–æ–¥–∞—Ç–∫—É.
        –°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –≤—ñ–¥–∂–µ—Ç–∏ (—Ä–∞–º–∫–∏, –º—ñ—Ç–∫–∏, –ø–æ–ª—è –≤–≤–æ–¥—É, –∫–Ω–æ–ø–∫–∏, —Ç–∞–±–ª–∏—Ü—é, —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å—É).
        """
        frm = tk.Frame(self.root)
        frm.pack(fill="both", expand=True)

        # Search
        searchfrm = tk.Frame(frm)
        searchfrm.pack(fill="x")
        tk.Label(searchfrm, text="–ü–æ—à—É–∫:").pack(side="left")
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(searchfrm, textvariable=self.search_var)
        search_entry.pack(side="left", fill="x", expand=True)
        self.search_var.trace_add('write', lambda *args: self.apply_filter())

        # Folder list
        top = tk.Frame(frm)
        top.pack(fill="x")
        self.lst = tk.Listbox(top, height=4)
        self.lst.pack(side="left", fill="x", expand=True)
        btns = tk.Frame(top)
        btns.pack(side="right")
        tk.Button(btns, text="–î–æ–¥–∞—Ç–∏", command=self.add_folder).pack(fill="x")
        tk.Button(btns, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=self.remove_folder).pack(fill="x")
        tk.Button(btns, text="–û—á–∏—Å—Ç–∏—Ç–∏", command=self.clear_folders).pack(fill="x")

        # Event filter
        evfrm = tk.LabelFrame(frm, text="–§—ñ–ª—å—Ç—Ä –ø–æ–¥—ñ–π")
        evfrm.pack(fill="x")
        self.ev_vars = {}
        for ev in ['created','modified','deleted','moved']:
            var = tk.BooleanVar(value=(ev in self.event_filter))
            self.ev_vars[ev] = var
            tk.Checkbutton(evfrm, text=ev, variable=var).pack(side="left")

        # Telegram
        tgfrm = tk.LabelFrame(frm, text="Telegram")
        tgfrm.pack(fill="x")
        self.tg_enable = tk.BooleanVar(value=bool(self.notifier.enabled()))
        tk.Checkbutton(tgfrm, text="–ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–¥—ñ—ó", variable=self.tg_enable).pack(anchor="w")
        self.tg_token = tk.Entry(tgfrm, show="*")
        self.tg_chat = tk.Entry(tgfrm, show="*")
        tk.Label(tgfrm, text="Token:").pack(anchor="w")
        self.tg_token.pack(fill="x")
        self.tg_token.insert(0,self.config.get('telegram',{}).get('token',''))
        tk.Label(tgfrm, text="Chat ID:").pack(anchor="w")
        self.tg_chat.pack(fill="x")
        self.tg_chat.insert(0,self.config.get('telegram',{}).get('chat_id',''))

        # Control buttons
        ctrl = tk.Frame(frm)
        ctrl.pack(fill="x")
        self.btn_start = tk.Button(ctrl, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç–∏", command=self.start_monitoring)
        self.btn_stop = tk.Button(ctrl, text="‚èπ –ó—É–ø–∏–Ω–∏—Ç–∏", command=self.stop_monitoring, state="disabled")
        self.btn_clear = tk.Button(ctrl, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é", command=self.clear_table)
        self.btn_export = tk.Button(ctrl, text="üíæ –ï–∫—Å–ø–æ—Ä—Ç CSV", command=self.export_csv)
        self.btn_start.pack(side="left")
        self.btn_stop.pack(side="left")
        self.btn_clear.pack(side="left")
        self.btn_export.pack(side="right")

        # Event table
        self.tree = ttk.Treeview(frm, columns=("ts","event","path","dest"), show="headings")
        for col, txt in [("ts","–ß–∞—Å"),("event","–ü–æ–¥—ñ—è"),("path","–®–ª—è—Ö"),("dest","–ö—É–¥–∏")]:
            self.tree.heading(col, text=txt, command=lambda c=col: self.sort_tree(c, False))
        self.tree.pack(fill="both", expand=True)

        # Status box
        self.status = tk.Text(frm, height=5)
        self.status.pack(fill="x")

        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("Vasyl Zozulia")
        self.status_bar = tk.Label(
            self.root,
            textvariable=self.status_var,
            bd=1,
            relief=tk.SUNKEN,
            anchor="w"
        )
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)

    def add_folder(self):
    	"""
        –í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–∞–ª–æ–≥—É —Ç–∞ –¥–æ–¥–∞—î –æ–±—Ä–∞–Ω–∏–π —à–ª—è—Ö –¥–æ —Å–ø–∏—Å–∫—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
        """
        folder = filedialog.askdirectory()
        if folder and folder not in self.paths:
            self.paths.append(folder)
            self.lst.insert("end", folder)

    def remove_folder(self):
    	"""
        –í–∏–¥–∞–ª—è—î –≤–∏–±—Ä–∞–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏ –∑—ñ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
        """
        sel = list(self.lst.curselection())
        for i in reversed(sel):
            path = self.lst.get(i)
            self.paths.remove(path)
            self.lst.delete(i)

    def clear_folders(self):
    	"""
    	–û—á–∏—â–∞—î –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
    	"""
        self.paths.clear()
        self.lst.delete(0,"end")

    def start_monitoring(self):
    	"""
        –ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ.
        """
        if self.thread and self.thread.is_alive():
            messagebox.showinfo("–£–≤–∞–≥–∞", "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        if not self.paths:
            messagebox.showwarning("–ù–µ–º–∞—î", "–î–æ–¥–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥")
            return
        evs = {ev for ev,var in self.ev_vars.items() if var.get()}
        self.thread = WatcherThread(self.paths, evs, self.on_event, self.append_status)
        self.thread.start()
        self.btn_start.config(state="disabled")
        self.btn_stop.config(state="normal")

    def stop_monitoring(self):
    	"""
        –ó—É–ø–∏–Ω—è—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –º–µ—Ç–æ–¥ `stop` —É –ø–æ—Ç–æ—Ü—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
        """
        if self.thread:
            self.thread.stop()
            self.thread = None
        self.btn_start.config(state="normal")
        self.btn_stop.config(state="disabled")

    def on_event(self, ts, evtype, path, dest):
    	"""
        –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–æ—Ç–æ–∫–æ–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó.
       	"""
        self._all_events.append((ts, evtype, path, dest))
        self.apply_filter()
        if self.tg_enable.get():
            self.notifier.token = self.tg_token.get()
            self.notifier.chat_id = self.tg_chat.get()
            text = f"[{ts}] {evtype.upper()}\n{path}" + (f"\n‚Üí {dest}" if dest else "")
            self.notifier.send_async(text)

    def apply_filter(self):
    	"""
        –§—ñ–ª—å—Ç—Ä—É—î —Ç–∞ –æ–Ω–æ–≤–ª—é—î –≤–º—ñ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ `Treeview` –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –≤ –ø–æ–ª—ñ –ø–æ—à—É–∫—É.
        """
        search_text = self.search_var.get().lower()
        for iid in self.tree.get_children():
            self.tree.delete(iid)
        count = 0
        for ts, evtype, path, dest in self._all_events:
            row = (ts, evtype, path, dest)
            if search_text and not any(search_text in str(x).lower() for x in row):
                continue
            iid = self.tree.insert("", "end", values=row)
            color = MyHandler.COLOR_MAP.get(evtype, "black")
            self.tree.item(iid, tags=(color,))
            self.tree.tag_configure(color, foreground=color)
            count += 1
            if count >= TREE_MAX_ROWS:
                break

    def clear_table(self):
    	"""
        –û—á–∏—â–∞—î —è–∫ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π, —Ç–∞–∫ —ñ –≤—ñ–∑—É–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é `Treeview`.
        """
        self._all_events.clear()
        for iid in self.tree.get_children():
            self.tree.delete(iid)

    def sort_tree(self, col, reverse):
    	"""
        –°–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ `Treeview` –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º.
        """
        data = [(self.tree.set(k, col), k) for k in self.tree.get_children("")]
        try:
            data.sort(key=lambda t: datetime.strptime(t[0], "%Y-%m-%d %H:%M:%S"), reverse=reverse)
        except:
            data.sort(reverse=reverse)
        for index, (val, k) in enumerate(data):
            self.tree.move(k, '', index)
        self.tree.heading(col, command=lambda: self.sort_tree(col, not reverse))

    
    def append_status(self, msg):
    	"""
        –î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å—É.
        """
        self.root.after(0, lambda: self.status.insert("end", msg+"\n"))

    
    def export_csv(self):
    	"""
        –ï–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—ñ –ø–æ–¥—ñ—ó –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–æ CSV-—Ñ–∞–π–ª—É.
        """
        path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV","*.csv")])
        if not path:
            return
        try:
            with open(path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(["timestamp","event_type","path","dest_path"])
                for ts, evtype, path, dest in self._all_events:
                    writer.writerow([ts, evtype, path, dest])
            messagebox.showinfo("OK", f"CSV –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {path}")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))

    def on_close(self):
    	"""
        –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤—ñ–∫–Ω–∞ –¥–æ–¥–∞—Ç–∫—É.
        """
        if self.thread:
            self.thread.stop()
            self.thread = None
        db_buffer.flush()
        save_folders(self.paths)
        save_config(self)
        self.root.destroy()


if __name__ == '__main__':
    root = tk.Tk()
    app = FileMonitorApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()
