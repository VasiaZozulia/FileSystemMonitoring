import threading
import time
import logging
import os

from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from db_buffer import db_buffer

class MyHandler(FileSystemEventHandler):
    """
    MyHandler - —Ü–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏,
    —â–æ —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ FileSystemEventHandler Watchdog.
    –í—ñ–Ω –≤–∏–∑–Ω–∞—á–∞—î, —è–∫ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    """
    COLOR_MAP = {'created':'green', 'deleted':'red', 'modified':'blue', 'moved':'orange'}

    def __init__(self, callback, events: set):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π.
        """
        super().__init__()
        self.callback = callback
        self.events = events

    def _emit_event(self, event_type: str, path: str, dest_path: str = None):
        """
        –í–Ω—É—Ç—Ä—ñ—à–Ω—è –¥–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—ñ–π.
        –ó–∞–ø–∏—Å—É—î –ø–æ–¥—ñ—é –¥–æ –±—É—Ñ–µ—Ä–∞ –ë–î, –ª–æ–≥—É—î —ó—ó —Ç–∞ –æ–Ω–æ–≤–ª—é—î GUI.
        """
        if not path or event_type not in self.events:
            return
        ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        db_buffer.add_event(ts, event_type, path, dest_path)
        msg = f"{event_type.upper()}: {path}" + (f" -> {dest_path}" if dest_path else "")
        logging.info(msg)
        self.callback(ts, event_type, path, dest_path or "")

    def on_created(self, event):
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É/–∫–∞—Ç–∞–ª–æ–≥—É.
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è Watchdog, –∫–æ–ª–∏ –æ–±'—î–∫—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è.
        """
        if not event.is_directory:
            self._emit_event('created', event.src_path)

    def on_deleted(self, event):
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É/–∫–∞—Ç–∞–ª–æ–≥—É.
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è Watchdog, –∫–æ–ª–∏ –æ–±'—î–∫—Ç –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è.
        """
        if not event.is_directory:
            self._emit_event('deleted', event.src_path)

    def on_modified(self, event):
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É/–∫–∞—Ç–∞–ª–æ–≥—É.
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è Watchdog, –∫–æ–ª–∏ –æ–±'—î–∫—Ç –∑–º—ñ–Ω—é—î—Ç—å—Å—è.
        """
        if not event.is_directory:
            self._emit_event('modified', event.src_path)

    def on_moved(self, event):
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è/–ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É/–∫–∞—Ç–∞–ª–æ–≥—É.
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è Watchdog, –∫–æ–ª–∏ –æ–±'—î–∫—Ç –ø–µ—Ä–µ–º—ñ—â—É—î—Ç—å—Å—è –∞–±–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î—Ç—å—Å—è.
        """
        if not event.is_directory:
            self._emit_event('moved', event.src_path, event.dest_path)

class WatcherThread(threading.Thread):
    """
    –ö–ª–∞—Å WatcherThread –∑–∞–ø—É—Å–∫–∞—î —Ç–∞ –∫–µ—Ä—É—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ GUI.
    """
    def __init__(self, paths, events, callback, status_callback):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
        """
        super().__init__(daemon=True)
        self.paths = paths
        self.events = events
        self.callback = callback
        self.status_callback = status_callback
        self.observer = Observer()
        self._stopping = threading.Event()

    def run(self):
        """
        –ú–µ—Ç–æ–¥, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø–æ—Ç–æ–∫—É.
        –í—ñ–Ω –Ω–∞–ª–∞—à—Ç–æ–≤—É—î —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞ Watchdog —ñ –∑–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.
        """
        try:
            handler = MyHandler(self.callback, self.events)
            for p in self.paths:
                if os.path.isdir(p):
                    self.observer.schedule(handler, p, recursive=True)
                else:
                    self.status_callback(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π —à–ª—è—Ö: {p}")
            self.observer.start()
            self.status_callback("üëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π‚Ä¶")
            while not self._stopping.is_set():
                time.sleep(0.2)
        except Exception as e:
            self.status_callback(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        finally:
            self.observer.stop()
            self.observer.join()
            self.status_callback("‚èπ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ.")
            db_buffer.flush()

    def stop(self):
        """
        –°–∏–≥–Ω–∞–ª—ñ–∑—É—î –ø–æ—Ç–æ–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∑—É–ø–∏–Ω–∫–∏.
        """
        self._stopping.set()
